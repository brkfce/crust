#[allow(dead_code)]

pub struct Board {
    pub squares: [Pieces; 64],
    pub move_count: i32,
    pub white_castle: bool,
    pub black_castle: bool,
    pub enpassant: bool,
    pub turn: Side,
}

enum Pieces {
    WP = 1,
    WN = 2,
    WB = 3,
    WR = 4,
    WQ = 5,
    WK = 6,
    BP = -1,
    BN = -2,
    BB = -3,
    BR = -4,
    BQ = -5,
    BK = -6,
    NN = 0,
}

enum Side {
    White,
    Black,
}

pub fn create_board() -> Board {
    Board {
        squares: [
            Pieces::WR,
            Pieces::WN,
            Pieces::WB,
            Pieces::WQ,
            Pieces::WK,
            Pieces::WB,
            Pieces::WN,
            Pieces::WR,
            Pieces::WP,
            Pieces::WP,
            Pieces::WP,
            Pieces::WP,
            Pieces::WP,
            Pieces::WP,
            Pieces::WP,
            Pieces::WP,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::NN,
            Pieces::BP,
            Pieces::BP,
            Pieces::BP,
            Pieces::BP,
            Pieces::BP,
            Pieces::BP,
            Pieces::BP,
            Pieces::BP,
            Pieces::BR,
            Pieces::BN,
            Pieces::BB,
            Pieces::BQ,
            Pieces::BK,
            Pieces::BB,
            Pieces::BN,
            Pieces::BR,
        ],
        move_count: 0,
        white_castle: true,
        black_castle: true,
        enpassant: false,
        turn: Side::White,
    }
}
